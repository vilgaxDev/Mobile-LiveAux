{"version":3,"sources":["internetReachability.ts"],"names":["InternetReachability","configuration","listener","_isInternetReachable","undefined","_currentInternetReachabilityCheckHandler","_currentTimeoutHandle","_setIsInternetReachable","isInternetReachable","_listener","_setExpectsConnection","expectsConnection","cancel","clearTimeout","_checkInternetReachability","hasCanceled","promise","fetch","_configuration","reachabilityUrl","then","response","reachabilityTest","Promise","resolve","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","setTimeout","catch","update","state","isConnected","currentState","tearDown"],"mappings":"oQAiBqBA,CAAAA,oB,CAOnB,8BACEC,aADF,CAEEC,QAFF,CAGE,6EAPMC,oBAON,CAPyDC,SAOzD,MANMC,wCAMN,CAN0F,IAM1F,MALMC,qBAKN,CALoE,IAKpE,MAKMC,uBALN,CAKgC,SAChCC,mBADgC,CAEvB,CACT,GAAI,KAAI,CAACL,oBAAL,GAA8BK,mBAAlC,CAAuD,CACrD,OACD,CAED,KAAI,CAACL,oBAAL,CAA4BK,mBAA5B,CACA,KAAI,CAACC,SAAL,CAAe,KAAI,CAACN,oBAApB,EACD,CAdC,MAgBMO,qBAhBN,CAgB8B,SAACC,iBAAD,CAAsC,CAEpE,GAAI,KAAI,CAACN,wCAAL,GAAkD,IAAtD,CAA4D,CAC1D,KAAI,CAACA,wCAAL,CAA8CO,MAA9C,GACA,KAAI,CAACP,wCAAL,CAAgD,IAAhD,CACD,CAED,GAAI,KAAI,CAACC,qBAAL,GAA+B,IAAnC,CAAyC,CACvCO,YAAY,CAAC,KAAI,CAACP,qBAAN,CAAZ,CACA,KAAI,CAACA,qBAAL,CAA6B,IAA7B,CACD,CAED,GAAIK,iBAAJ,CAAuB,CAGrB,GAAI,CAAC,KAAI,CAACR,oBAAV,CAAgC,CAC9B,KAAI,CAACI,uBAAL,CAA6B,IAA7B,EACD,CAED,KAAI,CAACF,wCAAL,CAAgD,KAAI,CAACS,0BAAL,EAAhD,CACD,CARD,IAQO,CAEL,KAAI,CAACP,uBAAL,CAA6B,KAA7B,EACD,CACF,CAxCC,MA0CMO,0BA1CN,CA0CmC,UAAwC,CAE3E,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CAEA,GAAMC,CAAAA,OAAO,CAAGC,KAAK,CAAC,KAAI,CAACC,cAAL,CAAoBC,eAArB,CAAL,CACbC,IADa,CAEZ,SAACC,QAAD,CAA6C,CAC3C,GAAI,CAACN,WAAL,CAAkB,CAChB,MAAO,CAAA,KAAI,CAACG,cAAL,CAAoBI,gBAApB,CAAqCD,QAArC,CAAP,CACD,CAFD,IAEO,CACL,MAAOE,CAAAA,OAAO,CAACC,OAAR,CAAgB,UAAhB,CAAP,CACD,CACF,CARW,EAUbJ,IAVa,CAWZ,SAACK,MAAD,CAAkB,CAChB,GAAIA,MAAM,GAAK,UAAf,CAA2B,CACzB,KAAI,CAAClB,uBAAL,CAA6BkB,MAA7B,EACA,GAAMC,CAAAA,mBAAmB,CAAG,KAAI,CAACvB,oBAAL,CACxB,KAAI,CAACe,cAAL,CAAoBS,uBADI,CAExB,KAAI,CAACT,cAAL,CAAoBU,wBAFxB,CAGA,KAAI,CAACtB,qBAAL,CAA6BuB,UAAU,CACrC,KAAI,CAACf,0BADgC,CAErCY,mBAFqC,CAAvC,CAID,CACF,CAtBW,EAwBbI,KAxBa,CAyBZ,UAAY,CACV,KAAI,CAACvB,uBAAL,CAA6B,KAA7B,EACA,KAAI,CAACD,qBAAL,CAA6BuB,UAAU,CACrC,KAAI,CAACf,0BADgC,CAErC,KAAI,CAACI,cAAL,CAAoBU,wBAFiB,CAAvC,CAID,CA/BW,CAAhB,CAkCA,MAAO,CACLZ,OAAO,CAAPA,OADK,CAELJ,MAAM,CAAE,iBAAY,CAClBG,WAAW,CAAG,IAAd,CACD,CAJI,CAAP,CAMD,CAtFC,MAwFKgB,MAxFL,CAwFc,SAACC,KAAD,CAAwD,CACtE,GAAI,MAAOA,CAAAA,KAAK,CAACxB,mBAAb,GAAqC,SAAzC,CAAoD,CAClD,KAAI,CAACD,uBAAL,CAA6ByB,KAAK,CAACxB,mBAAnC,EACD,CAFD,IAEO,CACL,KAAI,CAACE,qBAAL,CAA2BsB,KAAK,CAACC,WAAjC,EACD,CACF,CA9FC,MAgGKC,YAhGL,CAgGoB,UAAkC,CACtD,MAAO,CAAA,KAAI,CAAC/B,oBAAZ,CACD,CAlGC,MAoGKgC,QApGL,CAoGgB,UAAY,CAE5B,GAAI,KAAI,CAAC9B,wCAAL,GAAkD,IAAtD,CAA4D,CAC1D,KAAI,CAACA,wCAAL,CAA8CO,MAA9C,GACA,KAAI,CAACP,wCAAL,CAAgD,IAAhD,CACD,CAGD,GAAI,KAAI,CAACC,qBAAL,GAA+B,IAAnC,CAAyC,CACvCO,YAAY,CAAC,KAAI,CAACP,qBAAN,CAAZ,CACA,KAAI,CAACA,qBAAL,CAA6B,IAA7B,CACD,CACF,CAhHC,CACA,KAAKY,cAAL,CAAsBjB,aAAtB,CACA,KAAKQ,SAAL,CAAiBP,QAAjB,CACD,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    // We wrap the promise to allow us to cancel the pending request, if needed\n    let hasCanceled = false;\n\n    const promise = fetch(this._configuration.reachabilityUrl)\n      .then(\n        (response): Promise<boolean | 'canceled'> => {\n          if (!hasCanceled) {\n            return this._configuration.reachabilityTest(response);\n          } else {\n            return Promise.resolve('canceled');\n          }\n        },\n      )\n      .then(\n        (result): void => {\n          if (result !== 'canceled') {\n            this._setIsInternetReachable(result);\n            const nextTimeoutInterval = this._isInternetReachable\n              ? this._configuration.reachabilityLongTimeout\n              : this._configuration.reachabilityShortTimeout;\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              nextTimeoutInterval,\n            );\n          }\n        },\n      )\n      .catch(\n        (): void => {\n          this._setIsInternetReachable(false);\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            this._configuration.reachabilityShortTimeout,\n          );\n        },\n      );\n\n    return {\n      promise,\n      cancel: (): void => {\n        hasCanceled = true;\n      },\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (typeof state.isInternetReachable === 'boolean') {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]}